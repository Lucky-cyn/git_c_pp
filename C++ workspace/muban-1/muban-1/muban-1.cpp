// muban-1.cpp : 定义控制台应用程序的入口点。
//模板的说明
//template<class  形参名，class 形参名，…>   class 类名
//
//{
//	...
//};
//可以采用两种方式使用模板函数square<int>(value) or square(value).
//在模板函数的定义中，T代表数据类型。
//模板的声明和定义必须在同一个文件中，如头文件中。
//C语言的宏定义也可以实现函数模板的功能，#define square(x) (x * x)
//但是宏没有类型检查，函数模板有类型检查。

#include "stdafx.h"

#include <iostream>
using namespace std;
                                                       //函数模板
											//函数模板针对仅参数类型不同的函数；
//----------------------------------------------------------1-------------------------------------------------
//template <class T>
//T Max(T x, T y)
//{
//	return (x > y) ? x : y;
//}
//int main()
//{
//	cout <<"int类型:"<< Max(10, 4) << endl;//int
//	cout << "double类型:" << Max(10.44, 4.54) << endl;//double
//	cout << "float类型:" << Max(3.44f, 6.65f) << endl;//float
//}
//----------------------------------------------------------2-----------------------------------------------
//C++ 模板特例化
//下面的例子字符串类型需要特殊处理，采用模板的特例化
//template <class T>
//inline T square(T x)
//{
//	T result;
//	result = x * x;
//	return result;
//};
//
//// 模板特殊化  
//template <>
//string square<string>(string ss)
//{
//	return (ss + ss);
//};
//
//int main()
//{
//	int i = 6, ii;
//	string iii;
//	string ww("Aaa");
//
//	ii = square<int>(i);
//	cout << i << ": " << ii << endl;
//
//	iii = square<string>(ww);
//	cout << iii << endl;
//	return 0;
//}
//-----------------------------------------------------------end--------------------------------------------------
 



                                                           //类模板
										 //类模板针对仅数据成员和成员函数类型不同的类。
//---------------------------------------------------------------------------------------------------------------------------
//类模板定义：template <class T> class MyTemplateClass { ... };
//类模板特例化：template <> class MyTemplateClass <specific - data - type> { ... };








//---------------------------------------------------------end------------------------------------------------------------------
//模板是C++支持参数化多态的工具，使用模板可以使用户为类或者函数声明一种一般模式，使得类中的某些数据成员或者成员函数的参数、返回值取得任意类型。
//
//模板是一种对类型进行参数化的工具；
//
//通常有两种形式：函数模板和类模板；
//

//

//
//使用模板的目的就是能够让程序员编写与类型无关的代码。


//模板的声明或定义只能在全局，命名空间或类范围内进行。即不能在局部范围，函数内进行，比如不能在main函数中声明或定义一个模板。


//类模板和函数模板都是以template开始后接模板形参列表组成，模板形参不能为空，
//一但声明了类模板就可以用类模板的形参名声明类中的成员变量和成员函数，即可以在类中使用内置类型的地方都可以使用模板形参名来声明。

 
                                                      